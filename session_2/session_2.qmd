---
title: "Learning R"
subtitle: "Session 2: Data Manipulation in R"
format: 
  revealjs:
    theme: [clean.scss]
    transition: slide
    highlight-style: github
    code-copy: true
    auto-stretch: false
    fig-dpi: 300
---

# Part A: Introduction to Data Manipulation {.section}

## Welcome to Data Manipulation in R!

Data manipulation is a crucial part of data analysis and preparation.

-   Cleaning and transforming data

-   Filtering and selecting relevant information

-   Summarizing and grouping data

-   Handling missing values

In this session we will learn how to examine and clean our data in R.

## Introduction to Tidyverse

The Tidyverse is a collection of R packages designed for data science that can help you import, clean, and understand data.

First, we need some packages to be loaded in. You can install the core packages from theÂ `tidyverse`Â by simply typingÂ `install.packages("tidyverse")`Â in the console.

```{r}
#| echo: true
#| eval: false


# Install the packages if needed
# You only need to install a package once per device
install.packages("tidyverse", "dplyr")

# Load the packages
library(tidyverse)
library(dplyr)

```

For more information on Tidyverse, explore the documentation here: <https://www.tidyverse.org/>

Tidyverse tools use pipes and tibbles to make R code more human readable. The pipe, %\>%, allows the output of one command to be used as an input in the next command, which is cleaner than using nested functions. There are multiple ways to get to the final solution in R, but using tidyverse is an easy and common way to write and decipher R code.

\*Note: a shortcut to write the pipe command is ctrl+SHIFT+M (Windows) or command+SHIFT+M (Mac).

```{r}
## A single command 
sqrt(65)  

## Base R method of running more than one command 
round(sqrt(65), digit = 2)  

## Running more than one command with piping 
sqrt(65) %>% round(digit = 2)
```

## Filtering and Selecting Data with dplyr

One of the most useful tools in the Tidyverse is dplyr. Dplyr has many handy functions that can help with data wrangling, including:

-   `select()` extracts columns of interest.

-   `arrange()` changes the ordering of the rows.

-   `filter()` filters cases based on their values.

-   `mutate()` creates/adds new variables based on conditions of existing variables.

-   `rename()` easily changes the name of a column(s)

-   `summarise()` reduces multiple values down to a single summary.

-   `_join()` group of functions that merge two data frames together, includes (`inner_join()`, `left_join()`, `right_join()`, and `full_join()`).

Note: if you do not have the necessary libraries loaded and you try to use pipes or these functions, you will get an error. Remember to always first load in the packages you need with `library()`.

### Filtering Rows

Use `filter()` to subset data based on conditions.

```{r}
#| echo: true  

# Load built-in R dataset 
data(mtcars)  

# Filter for rows where mpg is greater than 20 
mtcars %>% filter(mpg > 20)
```

The above code allows us to view the mtcars dataset when it is filtered but does not change the underlying mtcars dataset so anytime we view mtcars it will be the original version.

```{r}
# View mtcars - note this is the original, non-filtered dataset
head(mtcars)
```

If we want to create a new dataset that is a filtered version of our mtcars dataset that we can build on that in later steps, we can assign (`<-`) it a new name like this: `mtcars_filter <-`

```{r}
# Create a new dataset that is filtered, rather than overriding mtcars
mtcars_filter <- mtcars %>% filter(mpg > 20)

# View the new mtcars_filter dataset
head(mtcars_filter)
```

### Selecting Columns

We can perform other functions with dplyr such as subsetting our data to view only a few columns at a time. Use `select()` to choose specific columns.

```{r}
#| echo: true  

# Select only mpg and hp columns 
mtcars %>% select(mpg, hp)
```

## Sorting and Arranging Data

Use `arrange()` to sort data.

```{r}
#| echo: true  

# Arrange data in ascending order of mpg 
mtcars %>% arrange(mpg)  

# Arrange data in descending order of mpg 
mtcars %>% arrange(desc(mpg))
```

## Creating New Variables with mutate()

Use `mutate()` to add new variables.

```{r}
#| echo: true  

# Create a new variable: power-to-weight ratio 
mtcars %>% mutate(power_to_weight = hp / wt)
```

## ðŸ”¨ Practice Time!

Try these exercises in your console:

1.  View the mtcars data set to see the columns available.
2.  Filter the data set for cars with less than 6 cylinders AND select only the mpg column in one operation.
3.  Create a new variable that is the mean of mpg.
4.  Now combine steps 2 and 3.

## ðŸ”¨ Results

```{r}
#| eval: false
#| echo: true

# load in mtcars dataset
data(mtcars)

# view mtcars dataset
head(mtcars)
# or view just the column names
colnames(mtcars)

# Filter rows where cyl is less than 6 AND select only mpg
mtcars %>% filter(cyl < 6) %>% select(mpg)

# Create a new variable: mean of mpg
mtcars %>% mutate(mean_mpg = mean(mpg))

# Filter rows, select mpg, and create new column that is mean_mpg
mtcars %>% filter(cyl < 6) %>% select(mpg) %>% mutate(mean_mpg = mean(mpg))

# Note: The new column mean_mpg contains the same value for all rows.
```

# Part B: Grouping and Summarizing Data {.section}

## Grouping Data with group_by()

Use `group_by()` to categorize data before summarization.

```{r}
#| echo: true  

# Group by number of cylinders 
mtcars %>% group_by(cyl)
```

## Summarizing Data with summarize()

Use `summarize()` to aggregate data.

```{r}
#| echo: true  

# Compute mean mpg by cylinder 
mtcars %>% group_by(cyl) %>% summarize(mean_mpg = mean(mpg))
```

## Joining Datasets

Use `left_join()` to combine datasets.

```{r}
#| echo: true  

# Create sample data frames 
df1 <- data.frame(ID = c(1, 2, 3), Score = c(90, 85, 88)) 
df2 <- data.frame(ID = c(1, 2, 3), Name = c("Alice", "Bob", "Charlie"))  

# Join data frames 
merged_df <- left_join(df1, df2, by = "ID")
```

## Handling Missing Values

R can help us check whether and how much missing data we have in our data. To identify missing values we can use the `is.na()` function which will return TRUE in the observations that contain missing values. Let's create a vector with some missing data and see if R can identify it.

```{r}
# Create a vector with missing data
x <- c(500, NA, 6, 40, NA, 13)

# Are there missings? Which ones?
is.na(x)

# Check how many are missing
sum(is.na(x))
```

To deal with missing we can use `na.omit()` to remove missing values.

```{r}
#| echo: true 

# Remove rows with missing values 
na.omit(x)
```

## Replacing Missing Values

However, if we don't want to remove missing values, we can also replace them with the mean. We can use `replace_na()` to fill in missing data.

```{r}
#| echo: true  

# Recode NA with the mean
x <- replace_na(x, mean(x, na.rm = TRUE))

# Round all our values to two decimals
round(x, 2)
```

In some cases we will have data where missing values have been coded as a number like 99. We should convert them to `NA` so we can clearly identify them as missing values.

```{r}
# Convert 999 to NAs
y <- c(1, 999, 6, 3, 999, 9)
y[y == 999] <- NA
```

Here is how this might look in our mtcars dataset. First, we check for missing data. For the purposes of this example, we can add some random missingness.

```{r}
#| echo: true  

# Check for missings - there are none in this dataset
sum(is.na(mtcars))

# Add some missing values randomly in the mpg and hp columns
set.seed(123)  # For reproducibility
mtcars[sample(nrow(mtcars), 5), "mpg"] <- 999  # Introduce 5 999 values in mpg
mtcars[sample(nrow(mtcars), 3), "hp"] <- NA   # Introduce 3 NA values in hp

# Check for missing values again
sum(is.na(mtcars))

# First, we know the 999 values in this case are missing values so let's replace them with NA
mtcars <- mtcars %>% mutate(mpg = na_if(mpg, 999))

# Then we can use replace_na to replace missing values in mpg with 0, or some other value 
mtcars %>% mutate(mpg = replace_na(mpg, 0))

# Replace missing values in a column with the mean of the column
mtcars %>% mutate(hp = replace_na(hp, mean(hp, na.rm = TRUE)))
```

## ðŸ”¨ Final Exercise

Create a new dataset that combines multiple steps you've learned:

1.  Load the mtcars dataset
2.  Filter `mtcars` for cars with more than 4 cylinders and select `mpg`, `hp`, and `wt` columns.
3.  Create a new column in this dataset that calculates `hp` per unit weight.
4.  Merge this dataset back to the original `mtcars` dataset.

```{r}
#| eval: false
#| echo: true

# Add your code here!
# Load the mtcars data
data(mtcars)

# View the mtcars data
head(mtcars)

# Create a new dataset filtered and with new column
# ...

# Merge back to mtcars data
# ...
```

```{r}
#| eval: false
#| echo: false

# Example solution

# Filter data and create new column
new_data <- mtcars %>% 
  filter(cyl > 4) %>% 
  select(mpg, hp, wt) %>% 
  mutate(hp_per_wt = hp / wt)

# Merge with original mtcars dataset
mtcars_merged <- left_join(mtcars, new_data, by = c("mpg", "hp", "wt"))
```

# Thank You! {.section}

## Additional Resources

-   [Tidyverse Documentation](https://www.tidyverse.org/)

-   [dplyr Cheatsheet](https://nyu-cdsc.github.io/learningr/assets/data-transformation.pdf)

-   [Data Wrangling in R](https://r4ds.had.co.nz/)

## Exercise Solutions

Solutions will be posted after the session!

::: callout-tip Keep practicing for better data manipulation skills! :::
